<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE web-app PUBLIC
	"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
	"http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>
	<display-name>Spring Petclinic</display-name>
	<description>Spring Petclinic sample application</description>


	<context-param>
		<param-name>contextConfigLocation</param-name>

		<param-value>
			classpath:applicationContext-hibernate.xml
		</param-value>

	</context-param>
	<!-- - Configures Log4J for this web app. - As this context specifies a 
		context-param "log4jConfigLocation", its file path - is used to load the 
		Log4J configuration, including periodic refresh checks. - - Would fall back 
		to default Log4J initialization (non-refreshing) if no special - context-params 
		are given. - - Exports a "web app root key", i.e. a system property that 
		specifies the root - directory of this web app, for usage in log file paths. 
		- This web app specifies "petclinic.root" (see log4j.properties file). -->
	<!-- Leave the listener commented-out if using JBoss -->
	<!-- <listener> <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class> 
		</listener> -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<servlet>
		<servlet-name>petclinic</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:petclinic-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>




	<servlet-mapping>
		<servlet-name>petclinic</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>
	<welcome-file-list>
		<!-- Redirects to "welcome.htm" for dispatcher handling -->
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<!-- Displays a stack trace -->
		<location>/WEB-INF/jsp/uncaughtException.jsp</location>
	</error-page>
	<!-- - Reference to Petclinic database. - Only needed if not using a local 
		DataSource but a JNDI one instead. -->
	<!-- <resource-ref> <res-ref-name>jdbc/petclinic</res-ref-name> <res-type>javax.sql.DataSource</res-type> 
		<res-auth>Container</res-auth> </resource-ref> -->
</web-app>
